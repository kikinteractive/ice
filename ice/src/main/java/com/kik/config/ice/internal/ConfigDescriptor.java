/*
 * Copyright 2016 Kik Interactive, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.kik.config.ice.internal;

import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Objects;
import java.util.Optional;

/**
 * Generated by a ConfigDescriptorFactory. This class is primarily a data class, intended to hold the static config
 * details determined by reflection on a component's Config interface.
 */
public class ConfigDescriptor
{
    private final Method method;
    private final String name;
    private final Type type;
    private final boolean isObservable;
    private final Optional<String> scopeOpt;
    private final Optional<String> defaultValueOpt;

    /**
     * Package-Private to ensure only factory creates these.
     */
    ConfigDescriptor(Method method, String name, Type type, boolean isObservable, Optional<String> scopeOpt, Optional<String> defaultValueOpt)
    {
        this.method = method;
        this.name = name;
        this.type = type;
        this.isObservable = isObservable;
        this.scopeOpt = scopeOpt;
        this.defaultValueOpt = defaultValueOpt;
    }

    public Method getMethod()
    {
        return method;
    }

    public String getConfigName()
    {
        return name;
    }

    public Type getConfigType()
    {
        return type;
    }

    public boolean isObservable()
    {
        return isObservable;
    }

    public Optional<String> getScope()
    {
        return scopeOpt;
    }

    public Optional<String> getDefaultValue()
    {
        return defaultValueOpt;
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(method, scopeOpt);
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        final ConfigDescriptor other = (ConfigDescriptor) obj;
        return Objects.equals(this.method, other.method)
            && Objects.equals(this.scopeOpt, other.scopeOpt);
    }

}
